// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ProcessStatusId.
const (
	Failed   ProcessStatusId = "failed"
	Finished ProcessStatusId = "finished"
	Working  ProcessStatusId = "working"
)

// Error defines model for Error.
type Error struct {
	Date    string  `json:"date"`
	Message string  `json:"message"`
	Status  float32 `json:"status"`
}

// GoogleCredentials defines model for GoogleCredentials.
type GoogleCredentials struct {
	Link string `json:"link"`
}

// GoogleToken defines model for GoogleToken.
type GoogleToken struct {
	Token string `json:"token"`
}

// ProcessStatus defines model for ProcessStatus.
type ProcessStatus struct {
	Complete bool   `json:"complete"`
	Date     uint64 `json:"date"`
	Detail   string `json:"detail"`

	// Id Process Status
	Id ProcessStatusId `json:"id"`
}

// ProcessStatusId Process Status
type ProcessStatusId string

// SetTokenGoogleJSONRequestBody defines body for SetTokenGoogle for application/json ContentType.
type SetTokenGoogleJSONRequestBody = GoogleToken

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get link to auth in Google
	// (GET /credentials/google)
	CredentialsGoogle(ctx echo.Context) error
	// Set token
	// (POST /credentials/google)
	SetTokenGoogle(ctx echo.Context) error
	// Start process to fill our calendar
	// (POST /start)
	StartCrossfitAgenda(ctx echo.Context) error
	// Status process
	// (GET /status)
	Status(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CredentialsGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsGoogle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsGoogle(ctx)
	return err
}

// SetTokenGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) SetTokenGoogle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetTokenGoogle(ctx)
	return err
}

// StartCrossfitAgenda converts echo context to params.
func (w *ServerInterfaceWrapper) StartCrossfitAgenda(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCrossfitAgenda(ctx)
	return err
}

// Status converts echo context to params.
func (w *ServerInterfaceWrapper) Status(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Status(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/credentials/google", wrapper.CredentialsGoogle)
	router.POST(baseURL+"/credentials/google", wrapper.SetTokenGoogle)
	router.POST(baseURL+"/start", wrapper.StartCrossfitAgenda)
	router.GET(baseURL+"/status", wrapper.Status)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVwW7jNhD9FWLao2I7TdqDbm1QBEUvBdxDgWIPtDiSGVOkMhxl4Q3074shLdleKbuX",
	"LLAnE+LjzLw388avUIW2Cx49RyhfIVZ7bHU6/kkUSA4dhQ6JLabPRjPKLx87hBIik/UNDAW0GKNulu8i",
	"a+7jxZXv2x0SDEMBhM+9JTRQ/j/izsGKnO9DMT4MuyesWGI+htA4fCA06NlqF+e1OusPC/V8kTSh3s7w",
	"bzign8fm8fPXg2fYUvR/KFQY43aS5jq+9MVh1tpgrXvHUNbaRZxi7UJwqL0EG7tSB2o1Qwm99fzbPUxY",
	"6xkbUbwAg6ytW+yTNTldrMh2bIOHcqxTbcfeoO9bofYx0EHeFVBbb+MejRy1dWguCL+hizVjb6eCinP7",
	"J/Jz4WSasOrJ8nErw5rV0p39G49yslLzHrVBggK8buXxfze6szcHPJ4FOb0YJKD1dUh6WHZy90Ahxtqy",
	"+r1BbzQU8IIUsxy3q81qI1qFDr3uLJRwt9qs7qCATvM+VbOuzlO5btIUyecGWX6ky1rE/cukXBM0zxuI",
	"ULELPmZqv2w2eR48o+dMtnO2SiHWTzH4s3Hl9DNhDSX8tD47e32y9XrumcT/uuENshJPqDqQisjqgo2y",
	"Xp3KTJ3o21bTEUp4HB9xULrn/SWwgC7EBepb5GSuC97PPUb+I5jjO1POJl4im65VtunliDL1OMxacT/3",
	"R+wr8UfdOzXRE873uW/XYOtftLPmlC+hbucoHziJGMh+QpNhd3NYHWhnjcmBfn3HMcmrf0Et2SLktVMR",
	"6QVJ4Ql4OQlb5JHeUMA6sqZUzhszINej3ya7fVv1cPixSAsN1Z1WJQdVW+dU6ElV2gkpmtQ4bfvFZTDt",
	"2O+2Aa7/dRbY5gpVqBXvcWQ0ZyuY8+UwfA4AAP//zsKAq0kIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
